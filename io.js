/**
 * database io funcs
 * treat this file like a mini library - import these functions
 * to be used wherever they are needed
 *
 * !!!!!!!!!!
 * REMEMBER TO CHANGE SECURITY SETTINGS AFTER TESTING AND AUTH IS SET UP
 */

import firebase from "firebase/app";
import db from "./firebase/config";

import * as ImagePicker from "expo-image-picker";

// returns image in form of blob (able to be stored by firebase)
// figure out a way to have event listeners to make sure the picture is actually
// taken when uploaded, since this is an async func
let imagePickerMediaLibrary = async ({ allowsEditing, aspect }) => {
  let permissionResult =
    await ImagePicker.requestMediaLibraryPermissionsAsync();

  if (permissionResult.granted === false) {
    alert("Permission to access media library is required");
    return;
  }

  let pickerResult = await ImagePicker.launchImageLibraryAsync({
    allowsEditing: allowsEditing,
    aspect: aspect,
  });

  return pickerResult;
};

let imagePickerCamera = async ({ allowsEditing, aspect }) => {
  let permissionResult = await ImagePicker.requestCameraPermissionsAsync();

  if (permissionResult.granted === false) {
    alert("Permission to access camera is required");
    return;
  }

  let pickerResult = await ImagePicker.launchCameraAsync({
    allowsEditing: allowsEditing,
    aspect: aspect,
  });

  return pickerResult;
};

// pic is the image object (generated from imagePickerMediaLibrary or imagePickerCamera)
let storeUserProfilePic = async (userID, pic) => {
  const picuri = await fetch(pic.uri);
  const blob = await picuri.blob();
  firebase
    .storage()
    .ref()
    .child("users/" + userID + "/profilepic.jpg")
    .put(blob);
};

// tested - returns download url (not sure how it is used with expo)
let retrieveUserProfilePic = async (userID) => {
  const url = await firebase.storage()
    .ref()
    .child('users/' + userID + "/profilepic.jpg")
    .getDownloadURL();
  return url;
};

let storePostPic = async (postID, pic) => {
  const picuri = await fetch(pic.uri);
  const blob = await picuri.blob();
  firebase
    .storage()
    .ref()
    .child("posts/" + postID + "/postpic.jpg")
    .put(blob);
}

// tested - returns download url (not sure how it is used with expo)
let retrievePostPic = async (postID) => {
  const url = await firebase.storage()
    .ref()
    .child('posts/' + postID + "/postpic.jpg")
    .getDownloadURL();
  return url;
};

// stores new user data
function storeUserData(userID, firstname, lastname) {
  firebase
    .database()
    .ref("users/" + userID)
    .set({
      firstname: firstname,
      lastname: lastname,
    });
}

// retreiving data once
// use JSON.parse to parse data before return
function getUserData(userID) {
  // sets up path
  const db = firebase.database().ref();
  db.child("users")
    .child(userID)
    .get()
    .then((snapshot) => {
      // checks if data exists
      if (snapshot.exists()) {
        return snapshot.val();
      } else {
        return null;
      }
    })
    .catch((error) => {
      console.error(error);
    });
}

// stores post data - tested
function storePostData(userID, postTitle, postDescription, postCreationDate, postCategories) {
  firebase.firestore().collection("post").add({
    uid: userID,
    title: postTitle,
    content: postDescription,
    date: postCreationDate,
    categories: postCategories
  }).then ((docRef) => {
    /**
     * slightly confusing - 
     * all data in rtdb has to be stored in key-value pairs
     * so storing an array ['a', 'b'] would be {0: 'a', 1: 'b'} in the db
     * 
     * all user posts are stored in key-value pairs {userPostID: postID}
     * where postID is the actual postID found in firestore/posts
     * and userPostID is a unique ID for the user generated by push(), and its only use
     * is to store the postID in a key-value pair
     * 
     * working on a better solution, but this works for now
     */
    firebase.database().ref("users/" + userID +"/userPosts")
    .push(docRef.id);
  })
}

function getPostData(postID) {
  firebase
    .firestore()
    .collection("post")
    .doc(postID)
    .get()
    .then((doc) => {
      if (doc.exists) {
        return doc.data();
      } else {
        return null;
      }
    })
    .catch((error) => {
      console.log("error");
    });
}

export {
  // image funcs
  imagePickerMediaLibrary,
  imagePickerCamera,
  storeUserProfilePic,
  storePostPic,
  retrieveUserProfilePic,
  retrievePostPic,

  // user db funcs
  storeUserData,
  getUserData,

  // post db funcs
  storePostData,
  getPostData,
};

/**
 * how the data is structured:
 * 
 * user data (rtdb):
 * users/
 *  -> uid (auto gen)
 *    -> firstname
 *    -> lastname
 *    -> profile pic
 *    -> grad year
 *    -> posts
 *      -> postid (auto gen)
 *    -> saved posts
 *      -> postid
 * 
 * post (firestore)
 * posts/
 *  -> postid
 *    -> uid
 *    -> title
 *    -> description
 *    -> image
 *    -> [categories]
 *    -> creation date
 */

